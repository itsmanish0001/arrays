this is optimal for arrays with positives, negatives, and zeros..........
//works for all positives, negatives, zeros

class Solution{
    public:
    int lenOfLongSubarr(int A[],  int N, int K) 
    { 
        unordered_map<int, int> map;
        int maxi = 0;
        int sum = 0;
        
        for(int i = 0; i < N; i++){
            sum = sum + A[i];
            if(sum == K){
                maxi = max(maxi, i+1);
            }
            
            int rem = sum - K;
            if(map.find(rem) != map.end()){
                maxi = max(maxi, i - map[rem]);
            }
            
            if(map.find(sum) == map.end()){
                map[sum] = i;
            }
        }
        
        return maxi;
    } 

};



more optimal if array have only positives...........

int left = 0;
int right = 0;
long long sum = arr[0];
int ans = 0;
int n = arr.size();

while(right < n){

while(left <= right && sum > k){
sum = sum - arr[left];
left++;
}

if(sum == k){
ans = max(ans, right - left + 1);
}

right++;
if(right < n){
sum = sum + arr[right];
}

return ans;


}

